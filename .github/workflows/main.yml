# 给我们的工作流起一个名字
name: CI - Model Training

# 1. 定义触发器
# on: [push] 的意思是，每当有任何代码被push到这个仓库的任何分支时，就自动触发这个工作流。
on: [push]

# 2. 定义任务 (Jobs)
jobs:
  # 我们只定义一个名为 train-model 的任务
  train-model:
    # 指定这个任务运行在GitHub提供的一个虚拟服务器上，系统是最新版的Ubuntu
    runs-on: ubuntu-latest

    # 3. 定义步骤 (Steps)
    # 步骤是按顺序执行的
    steps:
      # 第一步：'检出'代码
      # 使用一个社区预设好的action (actions/checkout@v4)，它会把你的仓库代码下载到虚拟服务器上
      - name: Check out repository code
        uses: actions/checkout@v4

      # 第二步：设置Python环境
      # 使用另一个预设action，它会安装指定版本的Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 第三步：安装Python依赖库
      # 运行我们熟悉的pip install命令，它会根据requirements.txt文件安装所有库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download and Unzip MovieLens Dataset
        run: |
          wget https://files.grouplens.org/datasets/movielens/ml-100k.zip
          unzip ml-100k.zip

      # 第四步：运行模型训练脚本
      # 执行我们的核心任务，训练模型并打印评估结果
      - name: Run model training
        env:
          MLFLOW_SERVER_IP: ${{ secrets.MLFLOW_SERVER_IP }}
        run: python train_model.py
